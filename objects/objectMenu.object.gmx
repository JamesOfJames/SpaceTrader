<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ColorD = ColorB;
ColorB = make_color_hsv(irandom_range(0,7)*32, 255, 255);
alarm[3] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ColorC = ColorA;
ColorA = make_color_hsv(irandom_range(0,7)*32, 255, 255);
alarm[4] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if PanelMessage1.uiVisible // Disable other buttons when message window is overlaid
{var a, b;
 for (a = 0; a &lt; instance_number(ui_button_ani) - 1; a += 1)
 {b = instance_find(ui_button_ani, a)
  if b.uiAnchor != PanelMessage1
  {b.uiEnabled = false;}}}
else
{var a, b;
 for (a = 0; a &lt; instance_number(ui_button_ani) - 1; a += 1)
 {b = instance_find(ui_button_ani, a)
  if b.uiAnchor != PanelMessage1
  {b.uiEnabled = true;}}}

Menu = round(Menu);

if Menu = 0 // New Game
{if alarm[0] &lt; 0
 {audio_play_sound_on(global.UISoundEmitter, soundOK, false, 10);
  alarm[0] = 10;}
 if alarm[0] == 0
 {room_goto(roomSpace);}
 else
 {audio_emitter_gain(global.MusicEmitter, global.MusicVolume*(alarm[0]/10));}}

if Menu = 1 // Continue
{
/* if GMech_Status() != 0 or GMech_Status() != 1
 {MessageWindow.uiMemo = "Not Connected#Save data not available.";
  PanelMessage1.uiFadeIn = true;
  Menu = -1;}
 else
 {if GMech_Status() != 1
  {Menu = 2;}
  else
  {/* Get save data from GMech Profile data
   GMech_Profile_ReadString(string variable, string default);
   GMech_Profile_ReadReal(string variable, float default);}}*/}

if Menu = 2 // Profile
{
/*if GMech_Status() != 1
 {// Do you have a login already?  Sign up, login, etc.
  }*/}

if Menu = 4 // Quit
{if alarm[0] &lt; 0
 {audio_play_sound_on(global.UISoundEmitter, soundCancel, false, 10);
  alarm[0] = 10;}
 if alarm[0] == 0
 {game_end();}
 else
 {audio_emitter_gain(global.MusicEmitter, global.MusicVolume*(alarm[0]/10));}}

/*
if script_execute(scriptInput, "Select") or keyboard_check_pressed(vk_enter) // Select
{io_clear(); // Prevent next menu options from being selected prematurely
 audio_play_sound_on(global.UISoundEmitter, soundOK, false, 10);}
if script_execute(scriptInput, "Cancel") or keyboard_check_pressed(vk_backspace) // Cancel
{io_clear(); // Prevent next menu options from being selected prematurely
 audio_play_sound_on(global.UISoundEmitter, soundCancel, false, 10);}


/*DISPLAY SETTINGS
           display_reset(aa, vsync);
Fullscreen or Windowed mode?
Display resolution
Aspect ratio
Refresh rate
Color depth
Particles on/off

SOUND SETTINGS
      sound_global_volume()
      audio_master_gain(gain);
Master volume
Music volume
Effects volume
Mute

CONTROLS
current settings
set controls
reset defaults

GAME OPTIONS
Difficulty (Easy/Normal/Hard)
Starting level
Enable/disable (or throttle) specific features
Number of lives
Text size/speed (if you’re displaying lots of dialogs)

PROFILE
Create new
Delete
Copy
Rename
Edit info (for user profile data, such as user name, password, and other profile data).
Social: Or you might want to have some kind of social networking features, such as sharing your game progress with your Facebook and Twitter friends, inviting friends to try out your game, or even send friends in-game items to help them, and so on.
Hall of Fame/Achievements: Or a “submit high score to server” feature.  Or you might have a registration and payment screen.
Update Checker: Or a “check for updates/download/install” feature.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all control events get here...
if other.uiControlName=='NewGame'
{Menu = 0;}
else if other.uiControlName=='ContinueGame'
{Menu = 1;}
else if other.uiControlName=='Profile'
{Menu = 2;}
else if other.uiControlName=='Settings'
{Menu = 3;}
else if other.uiControlName=='Quit'
{Menu = 4;}
else if other.uiControlName=='OK'
{PanelMessage1.uiFadeOut = true;}

/*
else if other.uiControlName=='sliders'
   {
      room_goto(rm_sliders);
   }    
else if other.uiControlName=='butani'
   {
      room_goto(rm_animate);
   }  
else if other.uiControlName=='textani'
   {
      room_goto(rm_textani);
   } 
else if other.uiControlName=='advlist'
   {
      room_goto(rm_listboxcustom);
   }
else if other.uiControlName=='horzlist'
   {
      room_goto(rm_listbox_horz);
   }   
else if other.uiControlName=='about'
   {
      room_restart();
   }
else if other.uiControlName=='gotomenu'
   {
      room_goto(rm_menu);
   }
else if other.uiControlName=='gauges'
   {
      room_goto(rm_gauge);
   }   
else if other.uiControlName=='slidergauge'
   { var tmp = other.uiValue;   
     with (ui_gauge) {uiSetValue=tmp;}  //set all gauges to same value   
   }   
else if other.uiControlName=='listbox1'
   {
    if other.itemindex&gt;0 
           textbox1.uiTextValue=other.items[other.itemindex];
   }
else if other.uiControlName=='hoverbox'
   {
    var tmp = other.itemindex; 
    if tmp&gt;=0 
       with (ui_button_ani) {uiHoverMode=tmp;
                             if uiHoverMode==2 uiHoverInfo=1.1;  //if zoom we need to set zoom factor;
                            }
       
   }  
else if other.uiControlName=='menuup'
   {
      if panel1.y&gt;(room_height-panel1.sprite_height)
                              { panel1.uiMoveY=room_height-panel1.sprite_height;
                                panel1.uiMoveX=panel1.x;
                                panel1.uiAniMove=true;
                              }  
   panel1.uiFadeIn=true;
   TestFace.uiVisible=true;
   }   
else if other.uiControlName=='menudown'
   {
      if panel1.y&lt;room_height { panel1.uiMoveY=room_height+10;
                                panel1.uiMoveX=panel1.x;
                                panel1.uiAniMove=true;
                              }  
   panel1.uiFadeOut=true;                              
   TestFace.uiVisible=false;                              
   }   
else if other.uiControlName=='fadeout'
   {
   if cboxmany.uiAlpha &lt; 1 cboxmany.uiFadeIn=true; else cboxmany.uiFadeOut=true;                             
   }     
else if other.uiControlName=='test'
   {
      panel1.uiVisible=false;
   }
else if other.uiControlName=='test2'
   {
      panel1.uiVisible=true;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Audio Setup
audio_stop_all();
{global.MusicVolume = 1;
 global.UIVolume = 1;
 global.PlayerVolume = 1;
 global.EffectsVolume = 1;}

audio_listener_orientation(0, 0, 1000, 0, -1, 0);

global.MusicEmitter = audio_emitter_create();
global.UISoundEmitter = audio_emitter_create();
global.PlayerSoundEmitter = audio_emitter_create();

global.MusicVolume = 1;
global.UIVolume = 1;
global.PlayerVolume = 1;

audio_emitter_gain(global.MusicEmitter, global.MusicVolume);
audio_emitter_gain(global.UISoundEmitter, global.UIVolume);
audio_emitter_gain(global.PlayerSoundEmitter, global.PlayerVolume);

audio_play_sound_on(global.MusicEmitter, musicCalm, true, 50);

// Starfield Setup
var a, b;
for (a = 1; a &lt;= 3; a += 1)
{randomize();
 Starfield = part_system_create();
 Star = part_type_create();
 part_type_shape(Star, pt_shape_flare);
 part_type_direction(Star, 0, 360, 0, 0);
 part_type_orientation(Star, 0, 0, 0, 0, 1);
 part_type_color_hsv(Star, c_white, 85 * irandom(1), 0, 64, 64, 255);
 part_type_alpha1(Star, 1);
 part_type_size(Star, a, a, 0, 0);
 part_type_scale(Star, .05, .05);
 
 StarSurface = surface_create(view_wview[0], view_hview[0]);
 surface_set_target(StarSurface);
 draw_clear_alpha(c_black, 1);
// draw_set_blend_mode_ext(bm_inv_src_color, bm_inv_dest_color);
 
 for (b = 0; b &lt; (view_wview[0]*view_hview[0]*.004)/(a*a); b += 1)
 {part_particles_create(Starfield, random(view_wview[0]), random(view_hview[0]), Star, 1);}
 part_system_drawit(Starfield);
/* draw_rectangle
 draw_set_blend_mode_ext(bm_src_alpha, bm_zero);
 
 draw_set_blend_mode(bm_subtract);
 
 draw_set_blend_mode(bm_add); */
 background_index[a] = background_create_from_surface(StarSurface, 0, 0, surface_get_width(StarSurface), surface_get_height(StarSurface), true, false);
 background_htiled[a] = true;
 background_vtiled[a] = true;
 background_hspeed[a] = a;
 background_alpha[a] = .5; 
 background_visible[a] = true;
 surface_free(StarSurface);
 part_system_clear(Starfield);}

surface_reset_target();

// Menu Text Setup

alarm[3] = room_speed
ColorA = make_color_hsv(irandom_range(0,7)*32, 255, 255);
ColorB = make_color_hsv(irandom_range(0,7)*32, 255, 255);
ColorC = make_color_hsv(irandom_range(0,7)*32, 255, 255);
ColorD = make_color_hsv(irandom_range(0,7)*32, 255, 255);

Menu = -1;

/* DISPLAY SETTINGS
           display_reset(aa, vsync);
Fullscreen or Windowed mode?
Display resolution
Aspect ratio
Refresh rate
Color depth
Particles on/off

SOUND SETTINGS
      sound_global_volume()
Master volume
Music volume
Effects volume
Mute

CONTROLS
current settings
set controls
reset defaults

GAME OPTIONS
Difficulty (Easy/Normal/Hard)
Starting level
Enable/disable (or throttle) specific features
Number of lives
Text size/speed (if you’re displaying lots of dialogs)

PROFILE
Create new
Delete
Copy
Rename
Edit info (for user profile data, such as user name, password, and other profile data).
Social: Or you might want to have some kind of social networking features, such as sharing your game progress with your Facebook and Twitter friends, inviting friends to try out your game, or even send friends in-game items to help them, and so on.
Hall of Fame/Achievements: Or a “submit high score to server” feature.  Or you might have a registration and payment screen.
Update Checker: Or a “check for updates/download/install” feature.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_set_font(fontRighteous32Pt);
if alarm[4] &gt; 0
{draw_text_color(view_xview[0]+(view_wview[0]/2), view_yview[0]+(view_hview[0]/2)-170, "Hyperwave: Tree", ColorC, ColorB, ColorC, ColorB, 1);
 draw_text_color(view_xview[0]+(view_wview[0]/2), view_yview[0]+(view_hview[0]/2)-170, "Hyperwave: Tree", ColorA, ColorB, ColorA, ColorB, (room_speed-alarm[4])/room_speed);}
else
{draw_text_color(view_xview[0]+(view_wview[0]/2), view_yview[0]+(view_hview[0]/2)-170, "Hyperwave: Tree", ColorA, ColorD, ColorA, ColorD, 1);
 draw_text_color(view_xview[0]+(view_wview[0]/2), view_yview[0]+(view_hview[0]/2)-170, "Hyperwave: Tree", ColorA, ColorB, ColorA, ColorB, (room_speed-alarm[3])/room_speed);}
 
/*draw_set_halign(fa_right);
draw_set_font(fontSmall);
draw_text(view_xview[0]+view_wview[0]-80, view_yview[0]+view_hview[0]-50, "Fullscreen");
draw_sprite_ext(spriteKeys, 3, view_xview[0]+view_wview[0]-50, view_yview[0]+view_hview[0]-50, .5, .5, image_angle, image_blend, image_alpha); */
   
   /*
//draw_self();
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fontTitle);
draw_text_color(view_xview[0]+(view_wview[0]/2), view_yview[0]+128, "What          Beneath", c_orange, c_orange, c_black, c_black, 1);
draw_text_color(view_xview[0]+(view_wview[0]/2), view_yview[0]+128, "   Lies        ", c_black, c_black, c_orange, c_orange, 1);

draw_set_font(fontMenu);
draw_text(view_xview[0]+(view_wview[0]/2), view_yview[0]+(view_hview[0]/2), string(ds_list_find_value(MenuItems, Menu)));

if Menu == 1
{}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
