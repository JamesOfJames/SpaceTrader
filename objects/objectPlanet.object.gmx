<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>setup = false;
totPlanets = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update position in orbit
/*phy_speed_x = 0;
phy_speed_y = 0;*/

starDir = point_direction(x, y, objStar.x, objStar.y);
orbitNorm = starDir + 90;

//physics_apply_impulse(x, y, lengthdir_x(orbitForce, orbitNorm), lengthdir_y(orbitForce, orbitNorm))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interpret Setup

if setup
{sysID = room;
 planRadius = 8 * power(2, plSize);
 x = lengthdir_x(plOrbit, plAngle);
 y = lengthdir_y(plOrbit, plAngle);
 switch (plType)
 {case Ammonia:
    planColorA = c_lime;
    planColorB = c_green;
    break;
  case Asteroid:
    planColorA = c_silver;
    planColorB = c_gray;
    break;
  case Chthonian:
    planColorA = c_red;
    planColorB = c_maroon;
    break;
  case Garden:
    planColorA = c_green;
    planColorB = c_navy;
    break;
  case Greenhouse:
    planColorA = c_orange;
    planColorB = c_olive;
    break;
  case Hadean:
    planColorA = c_aqua;
    planColorB = c_teal;
    break;
  case Ice:
    planColorA = c_silver;
    planColorB = c_ltgray;
    break;
  case Ocean:
    planColorA = c_blue;
    planColorB = c_navy;
    break;
  case Rock:
    planColorA = c_gray;
    planColorB = c_dkgray;
    break;
  case Sulfur:
    planColorA = c_yellow;
    planColorB = c_orange;
    break;}
 
 // Add physics stuff
/* var fix, inst;
 fix = physics_fixture_create();
 physics_fixture_set_circle_shape(fix, planRadius);
 physics_fixture_set_density(fix, 10); //starMass / (pi * sqr(starRadius))); // wassa formula for density of a sphere?
 myFix = physics_fixture_bind(fix, id);
 physics_fixture_delete(fix);
 physics_joint_distance_create(objStar, id, objStar.x, objStar.y, x, y, false);
 orbitForce = (phy_mass * 6);

 phy_linear_damping = 0;*/
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if setup
{draw_circle_colour(x, y, planRadius, planColorA, planColorB, false);
 draw_text(x, y + planRadius + 32, string(phy_speed)+"#"+string(point_distance(x, y, objStar.x, objStar.y)));}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
