<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// System Setup

// Get the id of objectSetup; it will help, promise.
objSet = instance_find(objectSetup, 0);
show_debug_message("a star is born! " + string(objSet.currentSys) + " " + string(room));

// Which rooms border this?
toE = -1;
toN = -1;
toW = -1;
toS = -1;

// arbitrary star values for now
starRadius = 256;
starColorA = c_yellow;
starColorB = c_orange;
starMass = (irandom(10) + irandom(10) + 1) / 10; // Stellar Mass, comared to le sun
//starLum = random(1) + random(1); // stellar luminosity, should really scale more, whatever.

// Handle some view essentials
whichPlanet = -1;
view_visible[0] = true;
view_enabled = true;
//view_wview[0] = global.wPort;
//view_hview[0] = global.hPort;

// Start building the planets
galPlanetsCol = objSet.galPlanetsCol;

while (ds_grid_value_exists(objSet.galPlanets, 0, 0, 0, ds_grid_height(objSet.galPlanets) - 1, room))
{var a = ds_grid_value_y(objSet.galPlanets, 0, 0, 0, ds_grid_height(objSet.galPlanets) - 1, room); // a is the row of relevant data in galPlanets
  
 if ds_grid_get(objSet.galPlanets, 0, a) == room // column 0 = which room / system?
 {// If it's relevant to this system, make a working copy
  var b, c, d;
  d = ds_grid_width(objSet.galPlanets) - 1;
  for (c = 0; c &lt; d; c++)
  {b[c] = ds_grid_get(objSet.galPlanets, c, a)} // b is the array, c is the column, d is the last column to read
  
  planNum = b[1]; // column 1 = which planet in that system?
  {var e = instance_create(0, 0, objectPlanet);
   e.objSet = objSet;
   e.objStar = id;
   e.plNum = b[1];
   e.sysID = room;
   e.plName = b[2]; // column 2 = planet name
   e.plSize = b[3]; // Planet size, 1-4, tiny - huge
   e.plType = b[4]; // plType
   e.plOrbit = b[5]; // orbit in px
   e.plAngle = b[6]; // initial orbit angle
   e.plPop = b[7]; // population size? 0 - 10
   e.plCrim = b[8]; // bool - criminal haven?
   // bools ff. - is the planet classified thus?
   e.plTradeClass[Ag] = b[galPlanetsCol + Ag];
   e.plTradeClass[As] = b[galPlanetsCol + As];
   e.plTradeClass[Ex] = b[galPlanetsCol + Ex];
   e.plTradeClass[In] = b[galPlanetsCol + In];
   e.plTradeClass[Mi] = b[galPlanetsCol + Mi];
   e.plTradeClass[Na] = b[galPlanetsCol + Na];
   e.plTradeClass[Ni] = b[galPlanetsCol + Ni];
   e.plTradeClass[Pe] = b[galPlanetsCol + Pe];
   e.plTradeClass[Po] = b[galPlanetsCol + Po];
   e.plTradeClass[Ri] = b[galPlanetsCol + Ri];
  // Resources produced; loop this 10 times; -1 or grid width -1 will stop the loop.  10x for loop with a break?
  var f, g;
  for (f = 0; f &lt; 10; f++)
  {g = b[galPlanetsCol + 10 + f];
   if g == -1 {break;}
   else
   {e.Res[f] = g;}}
  e.setup = true;
  with e {event_user(0);}} // handoff the rest of the planet's setup (and interpretation of this data) to the planet itself.
   
  // Time to get rid of the original line
  if a + 1 &lt; ds_grid_height(objSet.galPlanets) - 1 // can't trim copy lines below this if it's the last line.
  {ds_grid_set_grid_region(objSet.galPlanets, objSet.galPlanets, 0, a + 1, ds_grid_width(objSet.galPlanets) - 1, ds_grid_height(objSet.galPlanets) - 1, 0, a);}
  ds_grid_resize(objSet.galPlanets, ds_grid_width(objSet.galPlanets), ds_grid_height(objSet.galPlanets) - 1);}}

with (objectPlanet)
{totPlanets = instance_number(objectPlanet);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Look at different planets
/*
if keyboard_key != 0
{switch (keyboard_key)
 {case vk_numpad1:
   whichPlanet = 1;
   break;
  case vk_numpad2:
   whichPlanet = 2;
   break;
  case vk_numpad3:
   whichPlanet = 3;
   break;
  case vk_numpad4:
   whichPlanet = 4;
   break;
  case vk_numpad5:
   whichPlanet = 5;
   break;
  case vk_numpad6:
   whichPlanet = 6;
   break;
  case vk_numpad7:
   whichPlanet = 7;
   break;
  case vk_numpad8:
   whichPlanet = 8;
   break;
  case vk_numpad9:
   whichPlanet = 9;
   break;
  default:
   whichPlanet = -1;
   break;}}

// Handle the Views; some of this can be cut once the camera centers on a ship.
if whichPlanet &lt; 1
{view_xview[0] = x-(view_wview[0] / 2);
 view_yview[0] = y-(view_hview[0] / 2);}
else
{var a, b, c;
 a = instance_number(objectPlanet);
 for (b = 0; b &lt; a; b++)
 {c = instance_find(objectPlanet, b);
  if c.plNum == whichPlanet
  {view_xview[0] = c.x-(view_wview[0] / 2);
   view_yview[0] = c.y-(view_hview[0] / 2);
   break;}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hi Neighbors!

// What's my galX and galY these days?
var maxW, maxH;
maxW = ds_grid_width(objSet.galRooms);
maxH = ds_grid_height(objSet.galRooms);

if ds_grid_value_exists(objSet.galRooms, 0, 0, maxW - 1, maxH - 1, room)
{galX = ds_grid_value_x(objSet.galRooms, 0, 0, maxW - 1, maxH - 1, room);
 galY = ds_grid_value_y(objSet.galRooms, 0, 0, maxW - 1, maxH - 1, room);}

// Let's meet the neighbors!  (Do we have neighbors?)
if galX &lt; maxW - 1
{toE = ds_grid_get(objSet.galRooms, galX + 1, galY);}
if galY &gt; 0
{toN = ds_grid_get(objSet.galRooms, galX, galY - 1);}
if galX &gt; 0
{toW = ds_grid_get(objSet.galRooms, galX - 1, galY);}
if galY &lt; maxH - 1
{toS = ds_grid_get(objSet.galRooms, galX, galY + 1);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_circle_colour(x, y, starRadius, starColorA, starColorB, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
