<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteJavelin</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objectParentEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Initialize
Charge = 0;
RotationDegrees = 10; // Degrees between frames of the sprite's rotation

ClassName = ds_grid_get(global.PlayerData, 0, NameC);
Description = ds_grid_get(global.PlayerData, 0, DescriptionC);
Mass = ds_grid_get(global.PlayerData, 0, MassC); // Mass in lbs
var a;
MaxPower = 0;
for (a = 0; a &lt; ds_grid_width(global.PlayerData); a += 1)
{if ds_grid_get(global.PlayerData, a, ActiveC) == 1 and ds_grid_get(global.PlayerData, a, PowerC) &lt;= 0 {MaxPower -= ds_grid_get(global.PlayerData, a, PowerC)}}
script_execute(scriptPowerLoad, global.PlayerData);
Power = MaxPower-PowerLoad
Price = ds_grid_get(global.PlayerData, 0, PriceC);
Load = ds_grid_get(global.PlayerData, 0, LoadC);
PrimarySlots = ds_grid_get(global.PlayerData, 0, PrimaryC);
SecondarySlots = ds_grid_get(global.PlayerData, 0, SecondaryC);
AuxiliarySlots = ds_grid_get(global.PlayerData, 0, AuxiliaryC);
MaxHealth = ds_grid_get(global.PlayerData, 0, MaxHealthC); // Maximum Health of ship
Health = ds_grid_get(global.PlayerData, 0, HealthC); // Starting Health of ship
Durability = ds_grid_get(global.PlayerData, 0, DurabilityC);
MaxOccupancy = ds_grid_get(global.PlayerData, 0, MaxOccupancyC);
ShipObject = ds_grid_get(global.PlayerData, 0, ObjectC);
Size = ds_grid_get(global.PlayerData, 0, SizeC);
Handling = ds_grid_get(global.PlayerData, 0, HandlingC);
Maintainence = ds_grid_get(global.PlayerData, 0, MaintainenceC);

ChargePerStep = script_execute(scriptStatActive, global.PlayerData, ChargePerStepC);
Thrust = script_execute(scriptStatActive, global.PlayerData, ThrustC); // Engine Power
SpeedFuelRate = script_execute(scriptStatActive, global.PlayerData, SpeedFuelRateC); // 
TurningSpeed = script_execute(scriptStatActive, global.PlayerData, TurnC); // Degrees to turn when changing Facing
TurnFuelRate = script_execute(scriptStatActive, global.PlayerData, TurnFuelRateC); // 
MaxFuel = script_execute(scriptStatActive, global.PlayerData, MaxFuelC); // Maximum Fuel of ship
Fuel = script_execute(scriptStatActive, global.PlayerData, FuelC); // Starting Fuel of ship

ActiveSlot = -1;
if ds_grid_value_exists(global.PlayerData, 0, SlotTypeC, ds_grid_width(global.PlayerData)-1, SlotTypeC, 1)
{ActiveSlot = ds_grid_value_x(global.PlayerData, 0, SlotTypeC, ds_grid_width(global.PlayerData)-1, SlotTypeC, 1);}
else
{if ds_grid_value_exists(global.PlayerData, 0, SlotTypeC, ds_grid_width(global.PlayerData)-1, SlotTypeC, 2)
{ActiveSlot = ds_grid_value_x(global.PlayerData, 0, SlotTypeC, ds_grid_width(global.PlayerData)-1, SlotTypeC, 2);}}

if ds_grid_get(global.PlayerData, ActiveSlot, EquipTypeC) == 5
{ShotType = ds_grid_get(global.PlayerData, ActiveSlot, ShotTypeC);
 AmmunitionType = ds_grid_get(global.PlayerData, ActiveSlot, AmmunitionTypeC);
 ReloadSteps = ds_grid_get(global.PlayerData, ActiveSlot, ReloadStepsC);}

PartSys = part_system_create();
part_system_automatic_update(PartSys, true);
part_system_automatic_draw(PartSys, true); 
PartEmit1 = part_emitter_create(PartSys);
part_emitter_region(PartSys, PartEmit1, x-5, x+5, y-5, y+5, ps_shape_ellipse, ps_distr_gaussian) 
PartThrust = part_type_create();
part_type_shape(PartThrust, pt_shape_smoke);
part_type_size(PartThrust, 1, 2, 0, 0);
part_type_scale(PartThrust, 0.2, 0.2);
part_type_color_mix(PartThrust, c_yellow, c_orange);
part_type_alpha2(PartThrust, .75, 0);
part_type_blend(PartThrust, 1);
part_type_life(PartThrust, 10, 30);

part_type_speed(PartThrust, speed/2, speed, 0, 0);
part_type_direction(PartThrust, direction-5, direction+5, 0, 0.5);

Loaded = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
