<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteJavelin</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objectShip</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mommy's Lil' Helper

// Inherit the properties of the corresponding code action of the parent object.
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ship Stats

image_speed = 0; // Don't animate Player's ship
RotationDegrees = 360 / sprite_get_number(sprite_index); // Degrees of difference between Frames

Thrust = 1; // How much to accelerate by if thrust is held down
Mass = 1;
Load = 1;
Turn = 5; // How many more degrees to turn each step

TrueDirection = random(360); // This is the True, non-Isometric direction the ship is facing (used for which sprite frame to use, turning correctly)
IsoDirection = point_direction(0, 0, lengthdir_x(1, TrueDirection), lengthdir_y(1, TrueDirection) / 2);
MouseDirection = point_direction(x, y, mouse_x, mouse_y); // Non-true Mouse Direction
TrueMouseDirection = point_direction(0, 0, lengthdir_x(1, MouseDirection), lengthdir_y(1, MouseDirection) * 2); // Correlates to TrueDirection for turning calc?

FaceMouse = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle System

PartSys = part_system_create();
part_system_automatic_update(PartSys, true);
part_system_automatic_draw(PartSys, true); 
PartEmit1 = part_emitter_create(PartSys);
part_emitter_region(PartSys, PartEmit1, x-5, x+5, y-5, y+5, ps_shape_ellipse, ps_distr_gaussian) 
PartThrust = part_type_create();
part_type_shape(PartThrust, pt_shape_smoke);
part_type_size(PartThrust, 1, 2, 0, 0);
part_type_scale(PartThrust, 0.2, 0.2);
part_type_color_mix(PartThrust, c_yellow, c_orange);
part_type_alpha2(PartThrust, .75, 0);
part_type_blend(PartThrust, 1);
part_type_life(PartThrust, 10, 30);

part_type_speed(PartThrust, speed / 2, speed, 0, 0);
part_type_direction(PartThrust, direction - 5, direction + 5, 0, 0.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mommy's Lil' Helper

// Inherit the properties of the corresponding code action of the parent object.
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear Particle System

part_system_destroy(PartSys);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Particles

// Should engine exhaust appear in front or behind?
if image_index / image_number &gt; .5 {part_system_depth(PartSys, depth + 1);}
else {part_system_depth(PartSys, depth - 1);}

part_emitter_region(PartSys, PartEmit1, x - 5, x + 5, y - 5, y + 5, ps_shape_ellipse, ps_distr_gaussian) 
part_type_speed(PartThrust, speed / 4, speed / 2, 0, 0);
part_type_direction(PartThrust, point_direction(0, 0, lengthdir_x(1, TrueDirection - 185), lengthdir_y(1, TrueDirection - 185) / 2), point_direction(0, 0, lengthdir_x(1, TrueDirection - 175), lengthdir_y(1, TrueDirection - 175) / 2), 0, 0.5);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Input
if FaceMouse
{MouseDirection = point_direction(x, y, mouse_x, mouse_y); // Non-true Mouse Direction
 DesiredDirection = point_direction(0, 0, lengthdir_x(1, MouseDirection), lengthdir_y(1, MouseDirection) * 2);} // Correlates to TrueDirection for turning calc?

// Should Accelerate?
if mouse_check_button(mb_left)
{doAccel = 1;
 part_emitter_burst(PartSys, PartEmit1, PartThrust, 1);}
else {doAccel = 0;}





/*
// Turning
if round(angle_difference(DesiredDirection, TrueDirection)) != 0
{if abs(angle_difference(DesiredDirection, TrueDirection)) &lt;= Turn {TrueDirection = DesiredDirection;}
 else
 {if angle_difference(DesiredDirection, TrueDirection) &lt; 0 {TrueDirection -= Turn;}
  else {TrueDirection += Turn;}}}

IsoDirection = point_direction(0, 0, lengthdir_x(1, TrueDirection), lengthdir_y(1, TrueDirection) / 2);

// Accelerate
if doAccel &gt; 0
{vspeed -= sin(degtorad(IsoDirection)) * (Thrust*(Mass/Load)); // Add vertical thrust based on ship's Facing &amp; Engine Accel
 hspeed += cos(degtorad(IsoDirection)) * (Thrust*(Mass/Load));} // Add horizontal thrust based on ship's Facing &amp; Engine Accel
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mommy's Lil' Helper

// Inherit the properties of the corresponding code action of the parent object.
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mommy's Lil' Helper

// Inherit the properties of the corresponding code action of the parent object.
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ***Ship Direction

/*draw_set_font(font_ui);
draw_set_halign(fa_right);
draw_set_valign(fa_top);
draw_set_colour(c_white);
draw_text(view_wview[0] - 32, 32, string(round(TrueDirection)) + " - Direction#" + string(image_index) + " of " + string(image_number));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mommy's Lil' Helper

// Inherit the properties of the corresponding code action of the parent object.
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_blue);
draw_line(x, y, x + lengthdir_x(1000, IsoDirection), y + lengthdir_y(1000, IsoDirection));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
