<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objectParentShip</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initializtion

alarm[0] = 300+random(300); // Ready to die, Mr. Bond?
direction = random(360);
speed = random(10); // Start at full stop
DesiredCourse = direction;
DesiredSpeed = speed;
Facing = direction;

Dead = false; // Not dead yet!
Collided = false;
SignalStrength = 0; // No innate radar strength
Money = 0; // No starting cash
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DebugText</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 300+random(300);
DesiredCourse = random(360);
DesiredSpeed = random(10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MaxHealth = ds_grid_get(Data, 0, MaxHealthC);
Health = ds_grid_get(Data, 0, HealthC);

if Health &lt;= 0 // When Health is gone
{Dead = true;
 effect_create_above(ef_explosion, x, y, 1, c_orange);
 if !Collided 
 {var i, j
 for (i = irandom_range(1, 5); i &gt; 0; i -= 1) // Create objectMoney drops, set their Money variable to 50-250.
 {j = instance_create(x, y, objectMoney);
  with (j)
  {direction = (random(360) + other.direction) / 2;
   speed = (other.speed / 2)+(random(1)+.5);
   Money = irandom_range(50, 250);}}}
 instance_destroy();} // Destroy

if !Dead
{// Player in Radar range?
 if ds_grid_value_exists(Data, 0, EquipTypeC, ds_grid_width(Data), EquipTypeC, 8) and ds_grid_get(Data, ds_grid_value_x(Data, 0, EquipTypeC, ds_grid_width(Data), EquipTypeC, 8), ActiveC) == 1
 {SignalStrength = script_execute(scriptStatActiveMax, Data, SignalStrengthC);}
 if distance_to_object(objectParentPlayer) &lt;= SignalStrength 
 {DesiredCourse = point_direction(x, y, objectParentPlayer.x + lengthdir_x(100, objectParentPlayer.direction+180), objectParentPlayer.y + lengthdir_y(100, objectParentPlayer.direction+180)); // Get direction
  DesiredSpeed = objectParentPlayer.speed;}

 CorrectDirection = point_direction(0, 0, lengthdir_x(DesiredSpeed, DesiredCourse) - lengthdir_x(speed, direction), lengthdir_y(DesiredSpeed, DesiredCourse) - lengthdir_y(speed, direction));
 CorrectSpeed = abs(point_distance(0, 0, lengthdir_x(DesiredSpeed, DesiredCourse) - lengthdir_x(speed, direction), lengthdir_y(DesiredSpeed, DesiredCourse) - lengthdir_y(speed, direction)));

 // Turn
 if abs(angle_difference(CorrectDirection, Facing)) &gt;= 5 and abs(angle_difference(direction, DesiredCourse)) &gt; 5
 {PortDif = Facing - CorrectDirection; // Determine the diference between Facing and TargetDirection turning one way
  StarboardDif = CorrectDirection - Facing; // Determine the diference between Facing and TargetDirection turning the other way
  if PortDif &lt; 0 {PortDif += 360;} // Make sure PortDif is between 0-360
  if StarboardDif &lt; 0 {StarboardDif += 360;} // Make sure StarboardDif is between 0-360
  if !((TurningSpeed / 2 &gt; PortDif) or (TurningSpeed / 2 &gt; StarboardDif)) //and Fuel &gt;= TurnFuelRate // If either turn would get closer to the TargetDirection and has fuel
  {//Fuel -= TurnFuelRate; // Use Fuel for turning
   if abs(StarboardDif) &lt;= abs(PortDif) // Which difference is larger?
   {Facing += TurningSpeed;} // Turn the ship starboard if that difference is smaller
   else
   {Facing -= TurningSpeed;}}} // Turn the ship port if that difference is smaller
 else
 {// Change Speed 
  if (abs(lengthdir_x(speed, direction)-lengthdir_x(DesiredSpeed, DesiredCourse)) &gt; .25 or abs(lengthdir_y(speed, direction)-lengthdir_y(DesiredSpeed, DesiredCourse)) &gt; .25) //and Fuel &gt; SpeedFuelRate // If the player is pressing the Thrust button and has fuel
  {vspeed -= sin(degtorad(Facing)) * (Thrust * (Mass/Load)); // Add vertical thrust based on ship's Facing &amp; Engine Accel
   hspeed += cos(degtorad(Facing)) * (Thrust * (Mass/Load)); // Add horizontal thrust based on ship's Facing &amp; Engine Accel
   //part_emitter_burst(PartSys, PartEmit1, PartThrust, 1); // This is unsupported in HTML5?
   }}
   //Fuel -= SpeedFuelRate;} // Burn fuel
   
 // Facing Cleanup &amp; Sprite Update   
 if Facing &lt; 0 {Facing += 360;} // If Facing is less than 0 degrees, add 360 degrees.
 if Facing &gt;= 360 {Facing -= 360;} // If Facing is more than 360 degrees, subtract 360 degrees.
 image_index = round(Facing/RotationDegrees) // Change sprite to match Facing direction

  // Should engine exhaust appear in front or behind?
 if median (0, Facing, 180) == Facing {part_system_depth(PartSys, -10);}
 else {part_system_depth(PartSys, 10);}
 part_emitter_region(PartSys, PartEmit1, x-5, x+5, y-5, y+5, ps_shape_ellipse, ps_distr_gaussian) 
 part_type_speed(PartThrust, speed/4, speed/2, 0, 0);
 part_type_direction(PartThrust, Facing-185, Facing-175, 0, 0.5);

 // Outside Room
 if bbox_right &lt;= 0 {x += room_width + sprite_width;}
 if bbox_left &gt;= room_width {x -= room_width + sprite_width;}
 if bbox_bottom &lt;= 0 {y += room_height + sprite_height;}
 if bbox_top &gt;= room_height {y -= room_height + sprite_height;}

 var inst;
 inst = instance_place(x, y, objectParentShootable); // Is there a collision with a shootable object?
 if inst == noone {Collided = false;}
 else
 {if !inst.Dead and !Collided // If such an object exists and is not the shooter
  {script_execute(scriptCollision, inst, id) // Deal Damage
   Collided = true;}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>DebugText</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>""+string(ds_grid_get(Data, 0, NameC))</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>24</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.Vector
{draw_set_color(c_blue);
draw_arrow(x, y, x+lengthdir_x(10*speed, direction), y+lengthdir_y(10*speed, direction), 12);
draw_set_color(c_lime);
draw_arrow(x, y, x+lengthdir_x(10*DesiredSpeed, DesiredCourse), y+lengthdir_y(10*DesiredSpeed, DesiredCourse), 12);
draw_set_color(c_red);
draw_arrow(x, y, x+lengthdir_x(10*CorrectSpeed, CorrectDirection), y+lengthdir_y(10*CorrectSpeed, CorrectDirection), 12);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
