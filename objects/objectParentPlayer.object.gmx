<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objectParentShip</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initializtion

DeathAlarm = -1; // Ready to die, Mr. Bond?
var a;
for (a = 0; a &lt; ds_grid_width(global.PlayerData); a += 1)
{if ds_grid_get(global.PlayerData, a, EquipTypeC) == 5 {WeaponAlarm[a] = 0;}} // Ready to fire weapons
image_speed = 0; // Don't animate Player's ship
speed = 0; // Start at full stop

view_hborder[0] = view_wview[0] / 2; // Center view horizontally on Player
view_vborder[0] = view_hview[0] / 2; // Center view vertically on Player

Facing = direction; // Initial Facing per the ship's direction
FaceMouse = true; // Turn to face the mouse pointer, not target
ScrollMode = 0; // Scroll Slots/Targets

global.Activate = mb_left; // Default button to slow down is Left Mouse
global.Accelerate = mb_right; // Default button to speed up is Right Mouse
global.ScrollMode = mb_middle; // Default button to change scroll mode is Middle Mouse
global.InventoryWindow = false; // Default toggle for displaying Inventory Window
global.Paused = 0; // Default toggle for Paused

Dead = false; // Not dead yet!
SignalStrength = 0; // No innate radar strength
Money = 0; // No starting cash

global.Vector = false;

show_debug_message(string(program_directory));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DebugText</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Loaded == true and global.Paused == 0
{// Parallax some Backgrounds
 var a;
 for (a = 1; a &lt;= 3; a += 1)
 {background_x[a] = view_xview[0]/(10*a);
  background_y[a] = view_yview[0]/(10*a);}

 // Should engine exhaust appear in front or behind?
 if median (0, Facing, 180) == Facing {part_system_depth(PartSys, -10);}
 else {part_system_depth(PartSys, 10);}
 part_emitter_region(PartSys, PartEmit1, x-5, x+5, y-5, y+5, ps_shape_ellipse, ps_distr_gaussian) 
 part_type_speed(PartThrust, speed/4, speed/2, 0, 0);
 part_type_direction(PartThrust, Facing-185, Facing-175, 0, 0.5);

 if Dead == false
 {// Change Speed
  if mouse_check_button(global.Accelerate) //and Fuel &gt; SpeedFuelRate // If the player is pressing the Thrust button and has fuel
  {vspeed -= sin(degtorad(Facing)) * (Thrust*(Mass/Load)); // Add vertical thrust based on ship's Facing &amp; Engine Accel
   hspeed += cos(degtorad(Facing)) * (Thrust*(Mass/Load)); // Add horizontal thrust based on ship's Facing &amp; Engine Accel
   //part_emitter_burst(PartSys, PartEmit1, PartThrust, 1);
   }
   //Fuel -= SpeedFuelRate;} // Burn fuel

  // Turn
  if FaceMouse == true // Ship should face the mouse, not the target
  {TargetDirection = point_direction(x, y, mouse_x, mouse_y) // Determine what direction the mouse is in
   PortDif = Facing - TargetDirection; // Determine the diference between Facing and TargetDirection turning one way
   StarboardDif = TargetDirection - Facing; // Determine the diference between Facing and TargetDirection turning the other way
   if PortDif &lt; 0 {PortDif += 360;} // Make sure PortDif is between 0-360
   if StarboardDif &lt; 0 {StarboardDif += 360;} // Make sure StarboardDif is between 0-360
   if !((TurningSpeed / 2 &gt; PortDif) or (TurningSpeed / 2 &gt; StarboardDif)) //and Fuel &gt;= TurnFuelRate // If either turn would get closer to the TargetDirection and has fuel
   {//Fuel -= TurnFuelRate; // Use Fuel for turning
    if abs(StarboardDif) &lt;= abs(PortDif) // Which difference is larger?
    {Facing += TurningSpeed;} // Turn the ship starboard if that difference is smaller
    else
    {Facing -= TurningSpeed;}}} // Turn the ship port if that difference is smaller

  // Facing Cleanup &amp; Sprite Update   
  if Facing &lt; 0 {Facing += 360;} // If Facing is less than 0 degrees, add 360 degrees.
  if Facing &gt;= 360 {Facing -= 360;} // If Facing is more than 360 degrees, subtract 360 degrees.
  image_index = round(Facing/RotationDegrees) // Change sprite to match Facing direction

  // Change Scroll Mode
/*  if mouse_check_button_pressed(global.ScrollMode)
  {if ScrollMode == 0 {ScrollMode = 1;}
   else {ScrollMode = 0;}} */

  // Scroll Active Slots
  if mouse_wheel_up() //and ScrollMode = 0 // If the player is scrolling up
  {do {ActiveSlot += 1;}
   until ((ds_grid_get(global.PlayerData, ActiveSlot, SlotTypeC) != 1 or ds_grid_get(global.PlayerData, ActiveSlot, EquipTypeC) != 0));}
  if mouse_wheel_down() //and ScrollMode = 0 // If the player is scrolling down
  {do {ActiveSlot -= 1;}
   until ((ds_grid_get(global.PlayerData, ActiveSlot, SlotTypeC) != 1 or ds_grid_get(global.PlayerData, ActiveSlot, EquipTypeC) != 0));}
  ActiveSlot = median(6, ActiveSlot, 5 + ds_grid_get(global.PlayerData, 0, PrimaryC));
  
  // Activate / Fire
  if mouse_check_button(global.Activate) // If the player is pressing the Activate/Fire button
  {if ds_grid_get(global.PlayerData, ActiveSlot, EquipTypeC) == 5
   {if WeaponAlarm[ActiveSlot] &lt;= 0// If the reloading time has expired
    {/*if Power+Charge &gt;= ds_grid_get(global.PlayerData, ActiveSlot, PowerC)
     {var i;
      i = 0;
      i += Charge;
      Charge = 0;
      Power -= (ds_grid_get(global.PlayerData, ActiveSlot, PowerC) - i);*/
      WeaponAlarm[ActiveSlot] = ReloadSteps; // Reset the reloading time
      var inst;
      inst = instance_create(x, y, ShotType); // Make a Red Laser where the ship is
      with (inst)
      {Shooter = other.id; // Set the ship as the thing which fired the shot (to avoid friendly fire)
       speed = other.speed + ShotSpeed; // Give the shot the ship's momentum plus its own speed
       direction = other.Facing; // Give the shot the ship's Facing
       Damage = script_execute(scriptDamageRoll, ds_grid_get(global.PlayerData, other.ActiveSlot, DamageRollC));
       image_index = round(direction/RotationDegrees);}}// Change sprite to match its direction
      /*else
    {if Power&gt;0
      {var i;
       i = Power;
       Charge+=i;
       Power-=i;}}}}}
   else
   {Power = median(Power, Power+Charge, MaxPower-PowerLoad);}*/
   }}
   WeaponAlarm[ActiveSlot] -= 1;
   WeaponAlarm[ActiveSlot] = max(0, WeaponAlarm[ActiveSlot]);
     
 // Power Charge
 //Power = min(Power+ChargePerStep,MaxPower-PowerLoad)

 // Shield Recharge
 if ds_grid_get(global.PlayerData, 1, ActiveC) == 1
 {if ds_grid_get(global.PlayerData, 1, HealthC) + ds_grid_get(global.PlayerData, 1, 35) &lt; ds_grid_get(global.PlayerData, 1, MaxHealthC)
  {ds_grid_set(global.PlayerData, 1, HealthC, ds_grid_get(global.PlayerData, 1, HealthC) + ds_grid_get(global.PlayerData, 1, RechargePerStepC));}
  else
  {ds_grid_set(global.PlayerData, 1, HealthC, ds_grid_get(global.PlayerData, 1, MaxHealthC));}}

 // Colliding with Border?
 /*if collision_line(0, 0, room_width, 0, self.id, false, false) or collision_line(0, 0, 0, room_height, self.id, false, false) or collision_line(0, room_height, room_width, room_height, self.id, false, false) or collision_line(room_width, 0, room_width, room_height, self.id, false, false)
 {move_towards_point(room_width/2, room_height/2, speed/2);}}*/

 // Outside Room
 if x &lt;= 0 {x += room_width;}
 if x &gt;= room_width {x -= room_width;}
 if y &lt;= 0 {y += room_height;}
 if y &gt;= room_height {y -= room_height;}}}

// Out of Health :C
if ds_grid_get(global.PlayerData, 0, HealthC) &lt;= 0 // If ship is out of Health
{if DeathAlarm &lt;= 0
 {if DeathAlarm == 0
  {room_restart();} // Insert some High Score stuff here?
  else
  {Dead = true;
   Health = 0;
   effect_create_above(ef_explosion, x, y, 2, c_orange);
   effect_create_above(ef_explosion, x, y, 1, c_yellow);
   DeathAlarm = 45;
   visible = false;}}
 else
 {DeathAlarm -= 1;
  speed = speed / 2;}}

if keyboard_check_pressed(vk_space)
{if !global.Vector {global.Vector = true;}
 else {global.Vector = false;}}
  
// Toggle Inventory Window
if keyboard_check_pressed(vk_tab)
{if global.InventoryWindow == false
 {global.InventoryWindow = true;
  //screen_save_part("paused.png",0,0,view_wview[0],view_hview[0]);
  objectMasterController.x = x;
  objectMasterController.y = y;
  objectMasterController.visible = true;
  //sprite_replace(spriteMasterController,working_directory+"paused.png", 1, false, false, view_wview[0]/2, view_hview[0]/2);
  SpeedStorage = speed;
  speed =0;
  instance_deactivate_all(true);
  instance_activate_object(objectMasterController);
  global.Paused = 2;}
 else
 {global.InventoryWindow = false;
  global.Paused = 0;
  objectMasterController.visible = false;
  instance_activate_all();
  speed = SpeedStorage;}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fontRighteous14Pt);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

var RightEdge, Bottom
RightEdge = view_xport[0]+view_wport[0];
Bottom = view_yport[0]+view_hport[0];
CenterX = view_xview[0]+(view_wview[0]/2);
CenterY = view_yview[0]+(view_hview[0]/2);

/*
//Fuel Meter
draw_roundrect_color(view_xport[0]+16, view_yport[0]+16, (view_xport[0]+112), (view_yport[0]+48), c_gray, c_dkgray, false);
draw_set_alpha(0.5);
if (Fuel/MaxFuel) &gt;= .5 {draw_set_color(c_orange);}
else {draw_set_color(c_maroon);}
draw_roundrect(view_xport[0]+16, view_yport[0]+16, (view_xport[0]+16)+96*(Fuel/MaxFuel), (view_yport[0]+48), false);
draw_set_alpha(1);
draw_set_color(c_white);
draw_text(view_xport[0]+64, view_yport[0]+32, "Fuel");
*/

MaxHealth = ds_grid_get(global.PlayerData, 0, MaxHealthC);
Health = ds_grid_get(global.PlayerData, 0, HealthC);

//Health Meter
draw_set_alpha(0.75);
//draw_roundrect_color(view_xport[0]+(view_wport[0]/2)-128, Bottom-64, view_xport[0]+(view_wport[0]/2)+128, Bottom-16, c_gray, c_dkgray, false);
draw_set_colour(c_gray);
draw_roundrect(view_xport[0]+(view_wport[0]/2)-128, Bottom-64, view_xport[0]+(view_wport[0]/2)+128, Bottom-16, false);
draw_set_alpha(0.5);
if (Health/MaxHealth) &gt;= .75 {draw_set_color(c_green);}
if ((Health/MaxHealth) &gt;= .5 &amp;&amp; (Health/MaxHealth) &lt; .75) {draw_set_color(c_olive);}
if ((Health/MaxHealth) &gt;= .25 &amp;&amp; (Health/MaxHealth) &lt; .5) {draw_set_color(c_maroon);}
if ((Health/MaxHealth) &gt;= 0 &amp;&amp; (Health/MaxHealth) &lt; .25) {draw_set_color(c_red);}
draw_roundrect((view_xport[0]+(view_wport[0]/2)-128), Bottom-64, (view_xport[0]+(view_wport[0]/2)-128)+(256*(Health/MaxHealth)), Bottom-16, false);
draw_set_alpha(1);
draw_set_color(c_white);
draw_text(view_xport[0]+(view_wport[0]/2), Bottom-40, "Health");

/*
//Power Meter
draw_roundrect_color(RightEdge-112, view_yport[0]+16, (RightEdge-16), (view_yport[0]+48), c_gray, c_dkgray, false);
draw_set_alpha(0.5);
draw_set_color(c_blue);
draw_roundrect(RightEdge-112, view_yport[0]+16, (RightEdge-112)+96*((Power+PowerLoad)/MaxPower), (view_yport[0]+48), false);
draw_set_color(c_teal);
draw_roundrect(RightEdge-112, view_yport[0]+16, (RightEdge-112)+96*(PowerLoad/MaxPower), (view_yport[0]+48), false);
draw_set_alpha(1);
draw_set_color(c_white);
draw_text(RightEdge-64, view_yport[0]+32, "Power");
*/

// System &amp; Money
draw_set_font(fontBlueHighway14Pt);
draw_set_color(c_silver);
draw_set_halign(fa_right);
draw_text(RightEdge-24, view_yport[0]+24, /*string(global.CurrentSystem)+*/"$"+string(Money));

/*
// Calendar
if median(1, global.Month, 12) == global.Month
{if global.Hour &lt; 10
 {if global.Minute &lt; 10 {draw_text(view_xport[0]+(3*view_wport[0]/4), view_yport[0]+31, string(global.Day)+" "+string(global.MonthName[global.Month])+" "+string(global.Year)+"#0"+string(global.Hour)+":0"+string(global.Minute));}
  else {draw_text(view_xport[0]+(3*view_wport[0]/4), view_yport[0]+31, string(global.Day)+" "+string(global.MonthName[global.Month])+" "+string(global.Year)+"#0"+string(global.Hour)+":"+string(global.Minute));}}
 else
 {if global.Minute &lt; 10 {draw_text(view_xport[0]+(3*view_wport[0]/4), view_yport[0]+31, string(global.Day)+" "+string(global.MonthName[global.Month])+" "+string(global.Year)+"#"+string(global.Hour)+":0"+string(global.Minute));}
  else {draw_text(view_xport[0]+(3*view_wport[0]/4), view_yport[0]+31, string(global.Day)+" "+string(global.MonthName[global.Month])+" "+string(global.Year)+"#"+string(global.Hour)+":"+string(global.Minute));}}}
*/

// Slots
var i,j
for (i = 6; i &lt; ds_grid_width(global.PlayerData); i += 1) {if ds_grid_value_exists(global.PlayerData, i, SlotTypeC, ds_grid_width(global.PlayerData), SlotTypeC, 1) {j=i;}}
j+=1;
if ds_grid_value_exists(global.PlayerData, 6, SlotTypeC, ds_grid_width(global.PlayerData), SlotTypeC, 1)
{for (i = 6; i &lt; ds_grid_width(global.PlayerData); i += 1)
 {if ds_grid_get(global.PlayerData, i, SlotTypeC) == 1
  {if i == ActiveSlot
   {draw_set_alpha(0.75);
    //draw_roundrect_color(RightEdge-((j-i)*40)-24, Bottom-64, RightEdge+24-((j-i)*40), Bottom-16, c_dkgray, c_gray, false);
    draw_set_colour(c_gray);
    draw_roundrect(RightEdge-((j-i)*40)-24, Bottom-64, RightEdge+24-((j-i)*40), Bottom-16, false);
    draw_sprite(spriteEquip, ds_grid_get(global.PlayerData, i, SpriteC), RightEdge-((j-i)*40), Bottom-40);
    draw_set_font(fontBlueHighway14Pt);
    draw_set_alpha(1);
    draw_text(RightEdge-((j-i)*40)-18, Bottom-56, string(i-5));}
   else
   {if ActiveSlot &gt; i
    {draw_set_alpha(0.75);
     //draw_roundrect_color(RightEdge-((j-i)*40)-24, Bottom-40, RightEdge-((j-i)*40), Bottom-16, c_dkgray, c_gray, false);
     draw_set_colour(c_gray);
     draw_roundrect(RightEdge-((j-i)*40)-24, Bottom-40, RightEdge-((j-i)*40), Bottom-16, false);
     if ds_grid_get(global.PlayerData, i, ActiveC) == 1 {draw_sprite_ext(spriteEquip, ds_grid_get(global.PlayerData, i, SpriteC), RightEdge-((j-i)*40)-12, Bottom-28, 0.5, 0.5, image_angle, image_blend, image_alpha);}
     else {draw_sprite_ext(spriteEquip, ds_grid_get(global.PlayerData, i, SpriteC), RightEdge-((j-i)*40)-12, Bottom-28, 0.5, 0.5, image_angle, c_dkgray, 0.5);}
     draw_set_font(fontBlueHighway10Pt);
     draw_set_alpha(1);
     draw_text(RightEdge-((j-i)*40)-20, Bottom-34, string(i-5));}
    else
    {draw_set_alpha(0.75);
     //draw_roundrect_color(RightEdge-((j-i)*40), Bottom-40, RightEdge+24-((j-i)*40), Bottom-16, c_dkgray, c_gray, false);
     draw_set_colour(c_gray);
     draw_roundrect(RightEdge-((j-i)*40), Bottom-40, RightEdge+24-((j-i)*40), Bottom-16, false);
     if ds_grid_get(global.PlayerData, i, ActiveC) == 1 {draw_sprite_ext(spriteEquip, ds_grid_get(global.PlayerData, i, SpriteC), RightEdge-((j-i)*40)+12, Bottom-28, 0.5, 0.5, image_angle, image_blend, image_alpha);}
     else {draw_sprite_ext(spriteEquip, ds_grid_get(global.PlayerData, i, SpriteC), RightEdge-((j-i)*40)+12, Bottom-28, 0.5, 0.5, image_angle, c_dkgray, 0.5);}
     draw_set_font(fontBlueHighway10Pt);
     draw_set_alpha(1);
     draw_text(RightEdge-((j-i)*40)+4, Bottom-34, string(i-5));}}}}}
     
// Shield/Armor Status Bottom Left
draw_set_alpha(0.75);
draw_circle_color(view_xport[0]+40, Bottom-40, 24, c_dkgray, c_gray, false);
draw_set_alpha(0.5);
if ds_grid_get(global.PlayerData, 1, EquipTypeC) == 7 and ds_grid_get(global.PlayerData, 1, HealthC) &gt; 0 and ds_grid_get(global.PlayerData, 1, ActiveC) == 1
{draw_circle_color(view_xport[0]+40, Bottom-40, sqrt(sqr(24)*(ds_grid_get(global.PlayerData, 1, HealthC)/ds_grid_get(global.PlayerData, 1, MaxHealthC))), merge_color(c_maroon, c_blue, (ds_grid_get(global.PlayerData, 1, HealthC)/ds_grid_get(global.PlayerData, 1, MaxHealthC))), merge_color(c_red, c_teal, (ds_grid_get(global.PlayerData, 1, HealthC)/ds_grid_get(global.PlayerData, 1, MaxHealthC))), false);}
for (i = 0; i &lt; 4; i += 1)
{if ds_grid_get(global.PlayerData, 2+i, HealthC) &gt; 0
 {draw_sprite_ext(spriteArmor, i, view_xport[0]+40, Bottom-40, image_xscale, image_yscale, image_angle, merge_color(c_red, c_white, ds_grid_get(global.PlayerData, 2+i, HealthC)/ds_grid_get(global.PlayerData, 2+i, MaxHealthC)), image_alpha);}}
draw_sprite_ext(sprite_index, 27, view_xport[0]+40, Bottom-40, 32/sprite_width, 32/sprite_height, image_angle, make_colour_hsv(128, 0, 255), 0.5);
draw_set_alpha(1);

// Radar
if ds_grid_value_exists(global.PlayerData, 0, EquipTypeC, ds_grid_width(global.PlayerData), EquipTypeC, 8) and ds_grid_get(global.PlayerData, ds_grid_value_x(global.PlayerData, 0, EquipTypeC, ds_grid_width(global.PlayerData), EquipTypeC, 8), ActiveC) == 1
{SignalStrength = script_execute(scriptStatActiveMax, global.PlayerData, SignalStrengthC);}
TopRight = point_direction(CenterX, CenterY, (view_xview[0]+view_wview[0]), view_yview[0]);
TopLeft = point_direction(CenterX, CenterY, view_xview[0], view_yview[0]);
BottomLeft = point_direction(CenterX, CenterY, view_xview[0], (view_yview[0]+view_hview[0]));
BottomRight = point_direction(CenterX, CenterY, (view_xview[0]+view_wview[0]), (view_yview[0]+view_hview[0]));
with (objectParentShootable) // For each ship 
{PlayerRange = distance_to_object(objectParentPlayer);
 if PlayerRange &lt; objectParentPlayer.SignalStrength and !(median(view_xview[0], x, view_xview[0]+view_wview[0]) = x and median(view_yview[0], y, view_yview[0]+view_hview[0]) = y)
 {SignalDirection = point_direction(objectParentPlayer.CenterX, objectParentPlayer.CenterY, x, y); // Get direction
  if median(objectParentPlayer.TopRight, SignalDirection, objectParentPlayer.TopLeft) == SignalDirection // If the direction is towards the top of the screen
  {BlipY = view_yview[0]+12;
   BlipX = script_execute(scriptRadarCoord, x, y, objectParentPlayer.x, objectParentPlayer.y, 1, BlipY);}
  if median(objectParentPlayer.BottomRight, SignalDirection, objectParentPlayer.BottomLeft) == SignalDirection // If the direction is towards the bottom of the screen
  {BlipY = view_yview[0]+view_hview[0]-12;
   BlipX = script_execute(scriptRadarCoord, x, y, objectParentPlayer.x, objectParentPlayer.y, 1, BlipY);}
  if median(objectParentPlayer.BottomLeft, SignalDirection, objectParentPlayer.TopLeft) == SignalDirection // If the direction is towards the left of the screen
  {BlipX = view_xview[0]+12;
   BlipY = script_execute(scriptRadarCoord, x, y, objectParentPlayer.x, objectParentPlayer.y, 0, BlipX);}
  if min(objectParentPlayer.TopRight, SignalDirection) == SignalDirection or max(objectParentPlayer.BottomRight, SignalDirection) == SignalDirection// If the direction is towards the right of the screen
  {BlipX = view_xview[0]+view_wview[0]-12;
   BlipY = script_execute(scriptRadarCoord, x, y, objectParentPlayer.x, objectParentPlayer.y, 0, BlipX);}
   draw_set_blend_mode(bm_max);
   draw_sprite_ext(spriteRadar, 4, BlipX-view_xview[0], BlipY-view_yview[0], image_xscale, image_yscale, direction, c_red, 0.75);
   draw_set_blend_mode(bm_normal);}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>DebugText</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>514</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_text</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>""+string(Thrust/Mass)</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>24</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
